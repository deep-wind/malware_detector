# -*- coding: utf-8 -*-
"""
Created on Sun Apr  2 20:04:56 2023

@author: PRAMILA
"""


import numpy as np
import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from matplotlib import rcParams
import streamlit as st
import datetime
import pickle

st.markdown("<h1 style ='color:black; text_align:center;font-family:Comic Sans MS;font-size:30pt; font-weight: bold;'>üíª‚ö†Ô∏è MALWARE DETECTOR ‚ò†Ô∏èüíª</h1>", unsafe_allow_html=True)
st.write("\n")
st.write("\n")
st.write("\n")

millisecond = st.slider('Enter the time of arrival of each data packet on the network(millisecond)', min_value=0, step=1, max_value=1000,value=500)
state=st.slider('Enter the number of infected network states (in Mega volume)', min_value=0, step=1, max_value=43,value=43)
usage_counter=st.radio("Enter the Usage status",(0,1))
priority=st.slider("Enter a process's priority in the task structure for a process (in Giga volume)",min_value=0, step=1, max_value=4,value=4)
static_prio= st.slider("Enter a process's static priority",min_value=0, step=1, max_value=40000,value=1000)
normal_prior=st.radio("Whether normal priority is used ?",(0,1))
policy=st.radio("Whether or not it adheres to task planning policy ?",(0,1))
vm_pgoff=st.slider("Enter the offset area in the file (pages)",min_value=0, max_value=100, value=0, step=1)
vm_truncate_count=st.slider("Enter the count of vm files truncated ",min_value=0, max_value=50000, value=0, step=1)
task_size=st.slider("Enter the size of each target",min_value=0, max_value=100, value=0, step=1)

cached_hole_size=st.slider("Enter Free address space hole size",min_value=0, max_value=1000, value=0, step=1)
free_area_cache=st.slider("Enter the Free cache area of Linux kernel",min_value=0, max_value=1000, value=0, step=1)
mm_users=st.slider("Enter the number of Space users",min_value=0, max_value=1000, value=0, step=1)
map_count=st.slider("Enter the Count of memory areas",min_value=0, max_value=30000, value=0, step=1)
hiwater_rss=st.slider("Enter the Peak of resident set size",min_value=0, max_value=100, value=0, step=1)
total_vm=st.slider("Enter the Total number of pages",min_value=0, max_value=5000, value=0, step=1)
shared_vm=st.slider("Enter the shared pages count",min_value=0, max_value=500, value=0, step=1)
exec_vm=st.slider("Enter the Executable pages count",min_value=0, max_value=500, value=0, step=1)
reserved_vm=st.slider("Enter the Reserved pages count",min_value=0, max_value=1000, value=0, step=1)
nr_ptes=st.slider("Enter the Page table entries count",min_value=0, max_value=100, value=0, step=1)
end_data=st.slider("Enter the End address of code component",min_value=0, max_value=500, value=0, step=1)
last_interval=st.slider("Enter the Last interval time before thrashing",min_value=0, max_value=1000, value=0, step=1)
nvcsw=st.slider("Enter number of voluntary context switches",min_value=0, max_value=500, value=0, step=1)

nivcsw=st.slider("Enter the number of involuntary context switches",min_value=0, max_value=500, value=0, step=1)
min_flt=st.slider("Enter the number of minor page faults",min_value=0, max_value=500, value=0, step=1)
maj_flt=st.slider("Enter the number of major page faults",min_value=0, max_value=500, value=0, step=1)
fs_excl_counter=st.slider("Enter the count of file system exclusive resources",min_value=0, max_value=100, value=0, step=1)
lock=st.slider("Enter the number of Read-write synchronization lock used for file (in Giga volume)",min_value=0, max_value=3, value=3, step=1)

#utime
start_date = st.date_input("Enter the User time in (date)", value=datetime.datetime(2019,7,6))
start_time = st.time_input("Enter the User time in (time)", datetime.time(12, 00))
start_datetime = datetime.datetime.combine(start_date, start_time)
#st.write(start_datetime)
utime = int(round(start_datetime.timestamp()))
st.write("Integer timestamp of current datetime: ",utime)
#utime

stime=st.slider("Enter the set time of the task",min_value=0, max_value=500, value=0, step=1)
gtime=st.slider("Enter the Guest time of the task",min_value=0, max_value=500, value=0, step=1)
cgtime=st.slider("Enter the Cumulative group time of the task",min_value=0, max_value=500, value=0, step=1)
signal_nvcsw=st.slider("Enter number of signal from voluntary context switches",min_value=0, max_value=500, value=0, step=1)



test_data=[[millisecond,state*pow(10,6),usage_counter,priority*pow(10,9),static_prio,normal_prior,policy,vm_pgoff,vm_truncate_count,task_size,cached_hole_size,free_area_cache,mm_users, map_count, hiwater_rss, total_vm, shared_vm,exec_vm, reserved_vm, nr_ptes, end_data, last_interval,nvcsw,nivcsw,min_flt,maj_flt,fs_excl_counter,lock*pow(10,6),utime,stime,gtime,cgtime,signal_nvcsw]]
#st.write(test_data)
if(st.button('Predict')):
    decisiontree_model =pickle.load(open('decisiontree_model.pkl','rb'))
    o=decisiontree_model.predict(test_data)
    d="Decision Tree predicts : "+o[0]
    st.success(d)
    
    logistic_regression_model =pickle.load(open('logistic_regression_model.pkl','rb'))
    o=logistic_regression_model.predict(test_data)
    l="Logistic Regression predicts : "+o[0]
    st.success(l)
    
    bagging_model =pickle.load(open('bagging_model.pkl','rb'))
    o=bagging_model.predict(test_data)
    b="Bagging model predicts : "+o[0]
    st.success(b)
